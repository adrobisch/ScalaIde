{"body":"# ScalaIde\r\n\r\nIs a web-based IDE for the Scala Language. For the frontend html5 is used with especially websockets; in the backend the play framework is used, which is implemented in Scala.\r\n\r\nIt is originated as a teamproject at the department of computer science at [University of Applied Sciences, Constance, Germany](http://www.htwg-konstanz.de/).\r\n\r\nThanks to [Dirk](https://github.com/dirkmc/ph), he had previously implemented the compiler-binding. We ported it to Play 2.0.\r\n\r\n![ScalaIde Screenshot](https://lh3.googleusercontent.com/-WKTbRBZ009k/T98xE8BcA-I/AAAAAAAAAHY/bWuPr5fQxjE/s800/scalaide.png)\r\n\r\nScalaIde with a bigger Project opened:\r\n\r\n![ScalaIde Screenshot bigger Project](https://lh4.googleusercontent.com/-xD0TbYWRNcw/UHAXc0w0fMI/AAAAAAAAAIU/LVTjYQsUT8w/s720/scalaide.jpg)\r\n\r\n**Features**:\r\n\r\n  * Multiple users\r\n  * Each users has a project\r\n  * Automatic compiling for error detection and notice\r\n  * File tree\r\n  * Editor\r\n  * Terminal-Shell (ssh connection)\r\n  \r\n**Browser Support (Tested on)**:\r\n\r\n  * Firefox 13.0.1 (Windows)\r\n  * Safari 5.1.7 (Mac OS X)\r\n\r\n**Used technologies**:\r\n\r\n  * [HTML5 websocket](http://www.w3.org/TR/websockets/)\r\n  * [AceEditor](http://ace.ajax.org/)\r\n  * [jsTree](http://www.jstree.com/)\r\n  * [Typesafe Stack](http://typesafe.com/stack/download)\r\n  * [Play Framework 2.0](http://www.playframework.org/documentation/2.0/Installing)\r\n\r\nThis project is optimized for running on UNIX and UNIXlike systems -- especially for the Terminal feature. If you run it on Windows, the Terminal will be deactivated.\r\n\r\n## Installation\r\n\r\nSteps to do, before you can run ScalaIde.\r\n\r\n### Mac OS X\r\n\r\nInstructions for installing [Homebrew](http://mxcl.github.com/homebrew/).\r\n\r\nInstructions for installing [Scala](http://typesafe.com/stack/download).\r\n\r\n```\r\nbrew install scala sbt maven giter8\r\nbrew install play\r\n```\r\n\r\n### Debian or Ubuntu\r\n\r\nInstructions for installing [Scala](http://typesafe.com/stack/download).\r\n\r\n```\r\nwget http://apt.typesafe.com/repo-deb-build-0002.deb\r\ndpkg --install repo-deb-build-0002.deb \r\napt-get update\r\napt-get install typesafe-stack\r\napt-get install openjdk-6-jdk  # we need also javac!\r\n```\r\n[Play Framkework Download](http://www.playframework.org/download)\r\n\r\n```\r\ncd ~\r\nwget http://download.playframework.org/releases/play-2.0.1.zip\r\nunzip play-2.0.1.zip\r\n# add play to your PATH, via default $HOME/bin is already in your PATH\r\nmkdir bin\r\nln -s $HOME/play-2.0.1/play bin/play\r\n```\r\n\r\n### Windows\r\n\r\nClick something here and click something thereâ€¦\r\n\r\n## Configuration\r\n\r\n### Basic Configuration (without terminal support)\r\n\r\nIf you want to run ScalaIde on *Windows* there is **no terminal support** yet and on *UNIX* if you disable the terminal, you can save much configuration effort.\r\n\r\nIn `conf/application.conf` set the flag `terminal.support=true` if you want to *enable* terminal support, else let the default value `terminal.support=false`.\r\n\r\nVia default a `projectspaces` folder is created, where every user has his own folder (relative path in `conf/evolutions/2.sql` file) with source code files and maybe additional jar-files fetched automatically via `sbt update` at user login. Therefore the **login may take some seconds!**\r\n\r\nIf you want run the server on Windows you must provide in `conf/application.conf` the path to the bat-file, which stats sbt. Change this flag: `sbt.windows.path=\"C:/path/to/sbt.bat\"`.\r\n\r\nTo compile code the scala compiler is needed in form of jar-files. The play framework delivers this. In `conf/application.conf` you must set a flag to the main folder of your downloaded play installation: `framework.directory=\"/path/to/play-2.0\"`. In this example the play-executable would be in /path/to/play-2.0/play.\r\n\r\n### Advanced Configuration\r\n\r\nIf you want terminal support, there may be more configuration effort. Especially terminal support is only on **UNIX** (like Debian, Mac OS X) available yet.\r\n\r\nIf you enable the terminal (set in `conf/application.conf` the flag `terminal.support=true`, default ist `false`) we *assume*, you have a real operating-system user for every user in the database. The OS-user must be available via ssh. Users email is also ssh loginname and users password is also the ssh password. (Users marked as public have *never* terminal access/support.)\r\nFurther we assume the home of the user is his project path, and only one project per user is allowed yet!\r\nSet an absolute path (path to the user's home) and set the flag, that's an absolute path is set.\r\n\r\nYou can set the users in `conf/evolutions/2.sql`.\r\n\r\nBecause of the OS-useres you have more configuration, with groups and rights. Example: One OS-user (the master user) starts the ScalaIde and the client user can login through the Ide and have their own scope and can not kill the ScalaIde-Server. But the master user must have access (read, write) to the client user files!\r\n\r\n## Run It\r\n\r\nReminder: Change in `conf/application.conf`\r\n\r\n  * the variable `framework.directory` to the play-main-folder,\r\n  * windows users must set `sbt.windows.path`,\r\n  * if you want terminal support set `terminal.support` -> more configuration effort!\r\n\r\nLets begin, type in your shell:\r\n\r\n```\r\ngit clone git://github.com/themerius/ScalaIde.git\r\ncd ScalaIde\r\nplay run\r\n```\r\n\r\nOpen your websocket-ready browser at `http://localhost:9000`.\r\n\r\nYou will be asked if you want to create the bootstrap database, with three default users:\r\n\r\n  * lars@test.de, password = 123\r\n  * sven@test.de, password = 123\r\n  * simon@test.de, password = 123\r\n  * public@test.de, password = 123\r\n\r\nIf you want to create the database direcly, instead of `play run`, call play like this:\r\n\r\n```\r\nplay -DapplyEvolutions.default=true start\r\n```\r\n_To manage the databse_:\r\n\r\n```\r\nplay h2-browser run\r\n```\r\n\r\n## Limits\r\n\r\n  * One project per user\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"ScalaIde","tagline":"Html5 based Scala IDE with Play Framework"}